generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  firstName         String             @map("first_name")
  lastName          String             @map("last_name")
  middleName        String?            @map("middle_name")
  phone             String             @map("phone")
  password          String
  roleId            Int                @map("role_id")
  banned            Boolean            @default(false)
  reason_banned     String?            @map("reason_banned")
  telegramId        String?            @map("telegram_id")
  telegramUsername  String?            @map("telegram_username")

  bookings          Booking[]
  role              Role               @relation(fields: [roleId], references: [id])
  workspaces        Workspace[]
  managedWorkspaces WorkspaceManager[]

  @@map("user")
}

model Role {
  id          Int     @id @default(autoincrement())
  value       String  @unique
  description String?
  users       User[]

  @@map("role")
}

model Workspace {
  id          Int                @id @default(autoincrement())
  name        String
  address     String
  description String?
  capacity    Int
  amenities   String?
  approved    Boolean            @default(false)
  ownerId     Int                @map("owner_id")
  owner       User               @relation(fields: [ownerId], references: [id])
  managers    WorkspaceManager[]
  zones       WorkspaceZone[]

  @@map("workspace")
}

model WorkspaceZone {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  pricePerHour Float     @map("price_per_hour")
  maxPlaces    Int       @map("max_places")
  workspaceId  Int       @map("workspace_id")
  places       Place[]
  workspace    Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_zone")
}

model Place {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  status      String
  zoneId      Int?           @map("zone_id")
  bookings    Booking[]
  zone        WorkspaceZone? @relation(fields: [zoneId], references: [id])

  @@map("place")
}

model Booking {
  id         Int      @id @default(autoincrement())
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  status     String
  totalPrice Float    @map("total_price")
  userId     Int      @map("user_id")
  placeId    Int      @map("place_id")
  place      Place    @relation(fields: [placeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("booking")
}

model WorkspaceManager {
  workspaceId Int       @map("workspace_id")
  managerId   Int       @map("manager_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")
  manager     User      @relation(fields: [managerId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([workspaceId, managerId])
  @@map("workspace_manager")
}
